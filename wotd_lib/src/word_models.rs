use mongodb::bson::oid::ObjectId;
use serde::{Deserialize, Serialize};

// What do we need to represent with a struct?
// - MongoDB models
// - Create API DTOs

/// What is required, and that cannot be generated by the system to create a new WOTD.
#[derive(Serialize, Deserialize, Debug)]
pub struct DtoWotdCreate {
    pub word: String,
    pub definition: String,
    pub sentence: String,
}

/// Dto to be used throughout the program when not interacting with DB.
#[derive(Serialize, Deserialize)]
pub struct DtoWotd {
    pub _id: ObjectId,
    pub created_by_id: ObjectId,
    pub word: String,
    pub definition: String,
    pub sentence: String,
    pub created_at: chrono::DateTime<chrono::Utc>,
    pub updated_at: chrono::DateTime<chrono::Utc>,
}

/// The final product of user that will go into Database.
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct WordModel {
    pub _id: ObjectId,
    pub created_by_id: ObjectId,
    pub word: String,
    pub definition: String,
    pub sentence: String,
    pub created_at: mongodb::bson::DateTime,
    pub updated_at: mongodb::bson::DateTime,
}

impl From<WordModel> for DtoWotd {
    fn from(wotd_model: WordModel) -> Self {
        return DtoWotd {
            _id: wotd_model._id,
            created_by_id: wotd_model.created_by_id,
            word: wotd_model.word,
            sentence: wotd_model.sentence,
            definition: wotd_model.definition,
            created_at: wotd_model.created_at.into(),
            updated_at: wotd_model.updated_at.into(),
        };
    }
}
